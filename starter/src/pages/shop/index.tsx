import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { ShopPageProps } from "../../interfaces/Interfaces";
import { useEffect, useState } from "react";
import Link from "next/link";

const Shop: NextPage<ShopPageProps> = ({ data }) => {
  const router = useRouter();
  const [searchValue, setSearchValue] = useState("");
  const [activeFilter, setActiveFilter] = useState("");


  useEffect(() => {
    const { gender_like: currentGenderFilter } = router.query;
  
    if (Array.isArray(currentGenderFilter)) {
   
      setActiveFilter(currentGenderFilter[0] || "");
    } else {
      setActiveFilter(currentGenderFilter || "");
    }
  }, [router.query]);
  

 const handleFilterButton = (e: React.MouseEvent<HTMLButtonElement>) => {
  const filterValue = e.currentTarget.getAttribute("data-filter")?.split(".")[1] || "";
  let route = "/shop";

  const { q: currentSearchValue, gender_like: currentGenderFilter } = router.query;

  let queryParams = {};

  if (filterValue === "women" || filterValue === "man") {
    queryParams = {
      gender_like: filterValue,
      q: currentSearchValue || "",
    };
  } else if (filterValue === "*") {
    queryParams = {
      q: currentSearchValue || "", 
    };
  } else {
    queryParams = {
      q: filterValue,
    };
  }

  router.push({
    pathname: "/shop",
    query: queryParams,
  });

  
};

  const handleSearchFilter = () => {
    router.push({
      query: {
        ...router.query,
        q: searchValue,
      },
    });
    setSearchValue("");
  };
  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "" ? "how-active1" : ""
                } `}
                data-filter="*"
                onClick={handleFilterButton}
              >
                All Products
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "women" ? "how-active1" : ""
                } `}
                data-filter=".women"
                onClick={handleFilterButton}
              >
                Women
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "man" ? "how-active1" : ""
                } `}
                data-filter=".man"
                onClick={handleFilterButton}
              >
                Men
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button
                  className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04"
                  onClick={handleSearchFilter}
                >
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  value={searchValue}
                  onChange={(e) => setSearchValue(e.target.value)}
                />
              </div>
            </div>
          </div>

          <div className="row isotope-grid">
            {data && data.length > 0 ? (
              data.map((product) => (
                <div
                  className="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item women"
                  key={product.id}
                >
                  <div className="block2">
                    <div className="block2-pic hov-img0">
                      <img src={product.img} alt="IMG-PRODUCT" />
                      <Link href={`/shop/${product.id}`}>
                        <a
                          href="#"
                          className="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04 js-show-modal1"
                        >
                          View Details
                        </a>
                      </Link>
                    </div>

                    <div className="block2-txt flex-w flex-t p-t-14">
                      <div className="block2-txt-child1 flex-col-l ">
                        <a
                          href="product-detail.html"
                          className="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6"
                        >
                          {product.title}
                        </a>

                        <span className="stext-105 cl3">{product.price}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p>There are no results</p>
            )}
          </div>

          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
            <a
              href="#"
              className="flex-c-m how-pagination1 trans-04 m-all-7 active-pagination1"
            >
              1
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              2
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              3
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const gender = query.gender_like;
  const searchFilter = query.q;
  let res;
  let data;

  if (gender && searchFilter) {
    res = await fetch(
      `http://localhost:5001/products?gender_like=${gender}&q=${searchFilter}`
    );
    data = await res.json();
  } else if (gender) {
    res = await fetch(`http://localhost:5001/products?gender_like=${gender}`);
    data = await res.json();
  } else if (searchFilter) {
    res = await fetch(`http://localhost:5001/products?q=${searchFilter}`);
    data = await res.json();
  } else {
    res = await fetch("http://localhost:5001/products");
    data = await res.json();
  }

  return {
    props: {
      data,
    },
  };
};

export default Shop;
